{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/bfs.js","algorithms/dfs.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","distanceToFinishNode","Math","abs","isNode","mouseIsPressed","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","isDesktopView","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","setState","clearGrid","clearWalls","alert","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","nodeClassName","slice","algo","nextNodesStack","currentNode","nextNode","bfs","pop","dfs","nodesInShortestPathOrder","unshift","getNodesInShortestPathOrder","animate","i","setTimeout","animateShortestPath","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","xmlns","width","height","viewBox","d","onClick","visualize","toggleView","onMouseLeave","map","rowIdx","key","nodeIdx","handleMouseEnter","handleMouseUp","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.505ae261.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    \r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <td\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></td>\r\n    );\r\n  }\r\n}\r\n\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (!closestNode.isWall) {\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra } from \"../algorithms/dijkstra\";\r\n// import { AStar } from \"../algorithms/aStar\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\n// https://medium.com/@prudhvi.gnv/path-finding-visualizer-using-react-from-creating-to-building-and-deploying-bd1e2bc64696\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: 5,\r\n      FINISH_NODE_ROW: 5,\r\n      START_NODE_COL: 5,\r\n      FINISH_NODE_COL: 15,\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      MOBILE_ROW_COUNT: 10,\r\n      MOBILE_COLUMN_COUNT: 20,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n      isDesktopView: true,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({ isRunning: !this.state.isRunning });\r\n  }\r\n\r\n  toggleView() {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.clearWalls();\r\n      const isDesktopView = !this.state.isDesktopView;\r\n      let grid;\r\n      if (isDesktopView) {\r\n        grid = this.getInitialGrid(\r\n          this.state.ROW_COUNT,\r\n          this.state.COLUMN_COUNT\r\n        );\r\n        this.setState({ isDesktopView, grid });\r\n      } else {\r\n        if (\r\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\r\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\r\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\r\n        ) {\r\n          alert(\"Start & Finish Nodes Must Be within 10 Rows x 20 Columns\");\r\n        } else {\r\n          grid = this.getInitialGrid(\r\n            this.state.MOBILE_ROW_COUNT,\r\n            this.state.MOBILE_COLUMN_COUNT\r\n          );\r\n          this.setState({ isDesktopView, grid });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Set up the initial grid ********************/\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  /******************** Control mouse events ********************/\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          \"node node-start\"\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          \"node node-finish\"\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        ).className;\r\n        if (\r\n          nodeClassName === \"node node-visited\" ||\r\n          nodeClassName === \"node node-shortest-path\"\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${row}-${col}`\r\n        ).className;\r\n        if (this.state.isStartNode) {\r\n          if (nodeClassName !== \"node node-wall\") {\r\n            const prevStartNode =\r\n              this.state.grid[this.state.currRow][this.state.currCol];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`\r\n            ).className = \"node\";\r\n\r\n            this.setState({ currRow: row, currCol: col });\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              \"node node-start\";\r\n          }\r\n          this.setState({ START_NODE_ROW: row, START_NODE_COL: col });\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== \"node node-wall\") {\r\n            const prevFinishNode =\r\n              this.state.grid[this.state.currRow][this.state.currCol];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`\r\n            ).className = \"node\";\r\n\r\n            this.setState({ currRow: row, currCol: col });\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              \"node node-finish\";\r\n          }\r\n          this.setState({ FINISH_NODE_ROW: row, FINISH_NODE_COL: col });\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({ grid: newGrid });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning) {\r\n      this.setState({ mouseIsPressed: false });\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({\r\n          isStartNode,\r\n          START_NODE_ROW: row,\r\n          START_NODE_COL: col,\r\n        });\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({ isStartNode, mouseIsPressed: false });\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({ isFinishNode, mouseIsPressed: false });\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({ isWallNode, mouseIsPressed: false });\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n          ).className;\r\n          if (\r\n            nodeClassName !== \"node node-start\" &&\r\n            nodeClassName !== \"node node-finish\" &&\r\n            nodeClassName !== \"node node-wall\"\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node\";\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === \"node node-finish\") {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === \"node node-start\") {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n          ).className;\r\n          if (nodeClassName === \"node node-wall\") {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node\";\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize(algo) {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const { grid } = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case \"Dijkstra\":\r\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        // case \"AStar\":\r\n        //   visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n        //   break;\r\n        case \"BFS\":\r\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n          break;\r\n        case \"DFS\":\r\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n          // should never get here\r\n          break;\r\n      }\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push(\"end\");\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        ).className;\r\n        if (\r\n          nodeClassName !== \"node node-start\" &&\r\n          nodeClassName !== \"node node-finish\"\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === \"end\") {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n          ).className;\r\n          if (\r\n            nodeClassName !== \"node node-start\" &&\r\n            nodeClassName !== \"node node-finish\"\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path\";\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    return (\r\n      <div className=\"maindiv\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            <b>PathFinding Visualizer</b>\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"navbargithub\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <svg\r\n                  className=\"svg\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\" />\r\n                </svg>\r\n                <a\r\n                  className=\"nav-link\"\r\n                  href=\"http://www.github.com/PrudhviGNV/pathFinderVisualizer\"\r\n                >\r\n                  {\" \"}\r\n                  Github{\" \"}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n\r\n        <div className=\"topnav\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger\"\r\n            onClick={() => this.clearGrid()}\r\n          >\r\n            Clear Grid\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning\"\r\n            onClick={() => this.clearWalls()}\r\n          >\r\n            Clear Walls\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => this.visualize(\"Dijkstra\")}\r\n          >\r\n            Dijkstra's\r\n          </button>\r\n          {/* <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => this.visualize(\"AStar\")}\r\n          >\r\n            A*\r\n          </button> */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => this.visualize(\"BFS\")}\r\n          >\r\n            Bread First Search\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => this.visualize(\"DFS\")}\r\n          >\r\n            Depth First Search\r\n          </button>\r\n          {this.state.isDesktopView ? (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-light\"\r\n              onClick={() => this.toggleView()}\r\n            >\r\n              Mobile View\r\n            </button>\r\n          ) : (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-dark\"\r\n              onClick={() => this.toggleView()}\r\n            >\r\n              Desktop View\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"gridtable\">\r\n          <table\r\n            className=\"grid-container\"\r\n            onMouseLeave={() => this.handleMouseLeave()}\r\n          >\r\n            <tbody className=\"grid\">\r\n              {grid.map((row, rowIdx) => {\r\n                return (\r\n                  <tr key={rowIdx}>\r\n                    {row.map((node, nodeIdx) => {\r\n                      const { row, col, isFinish, isStart, isWall } = node;\r\n                      return (\r\n                        <Node\r\n                          key={nodeIdx}\r\n                          col={col}\r\n                          isFinish={isFinish}\r\n                          isStart={isStart}\r\n                          isWall={isWall}\r\n                          mouseIsPressed={mouseIsPressed}\r\n                          onMouseDown={(row, col) =>\r\n                            this.handleMouseDown(row, col)\r\n                          }\r\n                          onMouseEnter={(row, col) =>\r\n                            this.handleMouseEnter(row, col)\r\n                          }\r\n                          onMouseUp={() => this.handleMouseUp(row, col)}\r\n                          row={row}\r\n                        ></Node>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  let nextNodesStack = [startNode];\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.shift();\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n      const {col, row} = currentNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // return visitedNodesInOrder;\r\n}\r\n","// Returns all nodes in the order in which they were visited.\r\n// Make nodes point back to their previous node so that we can compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const nextNodesStack = [];\r\n  nextNodesStack.push(startNode);\r\n  while (nextNodesStack.length) {\r\n    const currentNode = nextNodesStack.pop();\r\n\r\n    if (currentNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    if (\r\n      !currentNode.isWall &&\r\n      (currentNode.isStart || !currentNode.isVisited)\r\n    ) {\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n\r\n      const {col, row} = currentNode;\r\n      let nextNode;\r\n      if (row > 0) {\r\n        nextNode = grid[row - 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (row < grid.length - 1) {\r\n        nextNode = grid[row + 1][col];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col > 0) {\r\n        nextNode = grid[row][col - 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n      if (col < grid[0].length - 1) {\r\n        nextNode = grid[row][col + 1];\r\n        if (!nextNode.isVisited) {\r\n          nextNode.previousNode = currentNode;\r\n          nextNodesStack.push(nextNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}